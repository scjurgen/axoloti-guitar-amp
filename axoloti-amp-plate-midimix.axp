<patch appVersion="2.0.0">
   <obj type="audio/out stereo" uuid="a1ca7a567f535acc21055669829101d3ee7f0189" name="out_1" x="798" y="14">
      <params/>
      <attribs/>
   </obj>
   <obj type="audio/outconfig" uuid="eace67e3304afaa1bb695b444e9345f2d8adaf00" name="outconfig_1" x="1246" y="14">
      <params/>
      <attribs>
         <combo attributeName="headphones" selection="0dB"/>
         <combo attributeName="mode" selection="Stereo"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="f4862da9-9964-4a80-b193-84a6c8003dd1" name="Distortion_1" x="196" y="28">
      <params>
         <frac32.u.map name="dryWet" value="64.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="0.0"/>
               </preset>
               <preset index="2">
                  <f v="64.0"/>
               </preset>
               <preset index="3">
                  <f v="64.0"/>
               </preset>
               <preset index="4">
                  <f v="0.0"/>
               </preset>
               <preset index="5">
                  <f v="0.0"/>
               </preset>
               <preset index="6">
                  <f v="0.0"/>
               </preset>
               <preset index="7">
                  <f v="64.0"/>
               </preset>
               <preset index="8">
                  <f v="64.0"/>
               </preset>
            </presets>
         </frac32.u.map>
         <int32 name="tone" value="2250">
            <presets/>
         </int32>
         <int32.small name="splitLow" value="62">
            <presets/>
         </int32.small>
         <int32.small name="splitHigh" value="594">
            <presets/>
         </int32.small>
         <frac32.u.map name="gainLow" value="13.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="0.0"/>
               </preset>
               <preset index="2">
                  <f v="0.0"/>
               </preset>
               <preset index="3">
                  <f v="0.0"/>
               </preset>
               <preset index="4">
                  <f v="0.0"/>
               </preset>
               <preset index="5">
                  <f v="0.0"/>
               </preset>
               <preset index="6">
                  <f v="0.0"/>
               </preset>
               <preset index="7">
                  <f v="0.0"/>
               </preset>
               <preset index="8">
                  <f v="0.0"/>
               </preset>
            </presets>
         </frac32.u.map>
         <frac32.s.map name="biasLow" value="0.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="0.0"/>
               </preset>
               <preset index="2">
                  <f v="0.0"/>
               </preset>
               <preset index="3">
                  <f v="0.0"/>
               </preset>
               <preset index="4">
                  <f v="0.0"/>
               </preset>
               <preset index="5">
                  <f v="0.0"/>
               </preset>
               <preset index="6">
                  <f v="0.0"/>
               </preset>
               <preset index="7">
                  <f v="0.0"/>
               </preset>
               <preset index="8">
                  <f v="0.0"/>
               </preset>
            </presets>
         </frac32.s.map>
         <frac32.u.map name="levelLow" value="32.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="62.5"/>
               </preset>
               <preset index="2">
                  <f v="62.5"/>
               </preset>
               <preset index="3">
                  <f v="62.5"/>
               </preset>
               <preset index="4">
                  <f v="62.5"/>
               </preset>
               <preset index="5">
                  <f v="62.5"/>
               </preset>
               <preset index="6">
                  <f v="62.5"/>
               </preset>
               <preset index="7">
                  <f v="62.5"/>
               </preset>
               <preset index="8">
                  <f v="62.5"/>
               </preset>
            </presets>
         </frac32.u.map>
         <frac32.u.map name="gainMid" value="25.5">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="64.0"/>
               </preset>
               <preset index="2">
                  <f v="64.0"/>
               </preset>
               <preset index="3">
                  <f v="64.0"/>
               </preset>
               <preset index="4">
                  <f v="41.0"/>
               </preset>
               <preset index="5">
                  <f v="41.0"/>
               </preset>
               <preset index="6">
                  <f v="41.0"/>
               </preset>
               <preset index="7">
                  <f v="41.0"/>
               </preset>
               <preset index="8">
                  <f v="41.0"/>
               </preset>
            </presets>
         </frac32.u.map>
         <frac32.s.map name="biasMid" value="-1.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="3.885780586188048E-16"/>
               </preset>
               <preset index="2">
                  <f v="5.0"/>
               </preset>
               <preset index="3">
                  <f v="4.0"/>
               </preset>
               <preset index="4">
                  <f v="4.0"/>
               </preset>
               <preset index="5">
                  <f v="4.0"/>
               </preset>
               <preset index="6">
                  <f v="4.0"/>
               </preset>
               <preset index="7">
                  <f v="4.0"/>
               </preset>
               <preset index="8">
                  <f v="4.0"/>
               </preset>
            </presets>
         </frac32.s.map>
         <frac32.u.map name="levelMid" value="43.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="34.0"/>
               </preset>
               <preset index="2">
                  <f v="51.5"/>
               </preset>
               <preset index="3">
                  <f v="29.5"/>
               </preset>
               <preset index="4">
                  <f v="29.5"/>
               </preset>
               <preset index="5">
                  <f v="29.5"/>
               </preset>
               <preset index="6">
                  <f v="29.5"/>
               </preset>
               <preset index="7">
                  <f v="29.5"/>
               </preset>
               <preset index="8">
                  <f v="29.5"/>
               </preset>
            </presets>
         </frac32.u.map>
         <frac32.u.map name="gainHigh" value="64.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="64.0"/>
               </preset>
               <preset index="2">
                  <f v="64.0"/>
               </preset>
               <preset index="3">
                  <f v="64.0"/>
               </preset>
               <preset index="4">
                  <f v="64.0"/>
               </preset>
               <preset index="5">
                  <f v="64.0"/>
               </preset>
               <preset index="6">
                  <f v="64.0"/>
               </preset>
               <preset index="7">
                  <f v="64.0"/>
               </preset>
               <preset index="8">
                  <f v="64.0"/>
               </preset>
            </presets>
         </frac32.u.map>
         <frac32.s.map name="biasHigh" value="4.718447854656915E-16">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="-21.0"/>
               </preset>
               <preset index="2">
                  <f v="0.0"/>
               </preset>
               <preset index="3">
                  <f v="-18.0"/>
               </preset>
               <preset index="4">
                  <f v="-18.0"/>
               </preset>
               <preset index="5">
                  <f v="-18.0"/>
               </preset>
               <preset index="6">
                  <f v="-18.0"/>
               </preset>
               <preset index="7">
                  <f v="-18.0"/>
               </preset>
               <preset index="8">
                  <f v="-18.0"/>
               </preset>
            </presets>
         </frac32.s.map>
         <frac32.u.map name="levelHigh" value="44.5">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="15.0"/>
               </preset>
               <preset index="2">
                  <f v="15.0"/>
               </preset>
               <preset index="3">
                  <f v="15.0"/>
               </preset>
               <preset index="4">
                  <f v="15.0"/>
               </preset>
               <preset index="5">
                  <f v="15.0"/>
               </preset>
               <preset index="6">
                  <f v="15.0"/>
               </preset>
               <preset index="7">
                  <f v="15.0"/>
               </preset>
               <preset index="8">
                  <f v="15.0"/>
               </preset>
            </presets>
         </frac32.u.map>
      </params>
      <attribs/>
      <object id="Distortion_1" uuid="f4862da9-9964-4a80-b193-84a6c8003dd1">
         <inlets>
            <frac32buffer name="in" description=""/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description=""/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.ratio name="dryWet" description="">
               <DefaultValue v="0.0"/>
            </frac32.u.map.ratio>
            <int32 name="tone" description="">
               <MinValue i="1000"/>
               <MaxValue i="10000"/>
            </int32>
            <int32.mini name="splitLow" description="">
               <MinValue i="40"/>
               <MaxValue i="640"/>
            </int32.mini>
            <int32.mini name="splitHigh" description="">
               <MinValue i="100"/>
               <MaxValue i="2000"/>
            </int32.mini>
            <frac32.u.map name="gainLow" description="">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.s.map name="biasLow" description="">
               <DefaultValue v="0.0"/>
            </frac32.s.map>
            <frac32.u.map name="levelLow" description="">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.u.map name="gainMid" description="">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.s.map name="biasMid" description="">
               <DefaultValue v="0.0"/>
            </frac32.s.map>
            <frac32.u.map name="levelMid" description="">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.u.map name="gainHigh" description="">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
            <frac32.s.map name="biasHigh" description="">
               <DefaultValue v="0.0"/>
            </frac32.s.map>
            <frac32.u.map name="levelHigh" description="">
               <DefaultValue v="0.0"/>
            </frac32.u.map>
         </params>
         <attribs/>
         <file-depends/>
         <includes>
            <include>/Users/jurgenschwietering/Desktop/axoloti-amp/FilterChain.h</include>
         </includes>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[typedef struct
{
    float dryWetMix;
    float gain[3];
    float dcBias[3];
    float level[3];
    int seperationFrequency[2];
    int tone;
} DistortionParameters;

class Distortion
{
public:
#ifndef M_PI_4
#define M_PI_4 (3.1415926535897932384626433832795f/4.0f)
#endif

float __attribute__ ((noinline)) FastArcTan(float x) {
  return M_PI_4*x - x*(fabs(x) - 1)*(0.2447f + 0.0663f*fabs(x));
}

	const float maxGain = 50.0f;
     Distortion()
        : m_dryWet(0.0), m_gain{0.1, 0.1, 0.1}, m_dcBias{0.0, 0.0, 0.0}
    {
        cnt = 0;
        removeDc.setHighpass(30,0.707);
        DistortionParameters initialDistortion =
            {
                1.0,{0.0,0.1,0.0},{0.0,0.0,0.0},{0.5,0.7,0.4},{70,500},5000
            };

        parameters(initialDistortion);
    }

    float __attribute__ ((noinline)) step(float in, int set)
    {
        if (m_gain[set] == 0.0)
            return in * m_level[set]*4.0;
        return atan(m_atanGain[set] * (in + m_dcBias[set])) * m_totalGain[set];
    }

    void __attribute__ ((noinline)) step(FloatBuffer &inPlace, int set)
    {
        if (m_gain[set] == 0.0)
        {
	        for (int s = 0; s < BUFSIZE; ++s)
	        {
		        inPlace[s] = inPlace[s] * m_level[set] * 4.0f;
	        }
        }
        else
        {
	        for (int s = 0; s < BUFSIZE; ++s)
	        {
	            inPlace[s] = atan(m_atanGain[set] * (inPlace[s] + m_dcBias[set])) * m_totalGain[set];
	        }
        }
    }

    void parameters(DistortionParameters &params)
    {
    		if (paramsSet.dryWetMix != params.dryWetMix)
    		{
    	        m_dryWet = params.dryWetMix;
    	        //LogTextMessage("drywet: %f", m_dryWet);
	        paramsSet.dryWetMix = params.dryWetMix;
    		}
    		
        for (int c = 0; c < 3; ++c)
        {
            m_dcBias[c] = params.dcBias[c]/2.0;
            m_level[c] = params.level[c];
		  {
	            m_gain[c] = params.gain[c]*2.0;
	            if (m_gain[c] == 0.0)
	            {
	                m_realAdjustGain[c] = 1.0;
	            } else
	            {
	                m_realAdjustGain[c] = 1.0 / atan(m_gain[c] * maxGain);
	            }
	            paramsSet.gain[c] = params.gain[c];
		  }
		  m_totalGain[c] = m_realAdjustGain[c] * m_level[c];
		  m_atanGain[c] = m_gain[c] * maxGain;
        }
        if (paramsSet.seperationFrequency[0] != params.seperationFrequency[0])
        {
        	   float f = params.seperationFrequency[0];
        	   LogTextMessage("f=%d", (int)f);
	        lowBandFilter.setLowpass(f*2);
	        midBandFilter[0].setHighpass(f);
	        paramsSet.seperationFrequency[0] = params.seperationFrequency[0];
        }
        if (paramsSet.seperationFrequency[1] != params.seperationFrequency[1])
        {
        	   float f = paramsSet.seperationFrequency[1];
        	   LogTextMessage("MB HP f=%d", (int)f);
        	   midBandFilter[1].setLowpass(f*2);
        	   upperBandFilter.setHighpass(f);
	        paramsSet.seperationFrequency[1] = params.seperationFrequency[1];
        }

        if (paramsSet.tone != params.tone)   
        {
        	    float f = params.tone;
	        lp.setLowpass(f, 0.5);// softer falling off
	        paramsSet.tone = params.tone;
    	   }
    }

    void update(const int32buffer inInt, int32buffer &outInt)
    {
        if (m_dryWet == 0.0)
        {
        	  memcpy(outInt, inInt, sizeof(int32buffer));
            return;
        }
        FloatBuffer in;
        for (int i = 0; i < BUFSIZE; ++i)
        {
        	in[i] = q27_to_float(inInt[i]);
        }

        FloatBuffer tmp;
        FloatBuffer lowBand;
        FloatBuffer midBand;
        FloatBuffer upperBand;
        
        lowBandFilter.update(in, lowBand, BUFSIZE);

        upperBandFilter.update(in, upperBand, BUFSIZE);
        midBandFilter[0].update(in, tmp, BUFSIZE);
        midBandFilter[1].update(tmp, midBand, BUFSIZE);
        step(lowBand, 0);
        step(midBand, 1);
        step(upperBand, 2);

        for (int i = 0; i < BUFSIZE; ++i)
        {
            tmp[i] = (lowBand[i] + midBand[i] + upperBand[i]) / 2 * m_dryWet;
        }
        FloatBuffer res;

        lp.update(tmp, res, BUFSIZE);
        removeDc.update(res, tmp,BUFSIZE);
        for (int i = 0; i < BUFSIZE; ++i)
        {
        	outInt[i] = float_to_q27(tmp[i]+in[i] * (1.0-m_dryWet));
        }

    }


private:
    AudioFilterBiquad lp;
    AudioFilterBiquad removeDc;
    AudioFilterBiquad lowBandFilter;
    AudioFilterBiquad midBandFilter[2];
    AudioFilterBiquad upperBandFilter;
    float m_dryWet;
    float m_gain[3];
    float m_level[3];
    float m_dcBias[3];
    float m_totalGain[3];
    float m_atanGain[3];
    float m_realAdjustGain[3];
    float maxvalSum;
    float minVal, maxVal;
	DistortionParameters paramsSet;
    int cnt;
};

Distortion distortion;]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[static int kcnt = 0;
if (kcnt++>1000)
{
	DistortionParameters params;
	params.dryWetMix = q27_to_float(param_dryWet);
	params.gain[0] = q27_to_float(param_gainLow);
	params.gain[1] = q27_to_float(param_gainMid);
	params.gain[2] = q27_to_float(param_gainHigh);
	params.dcBias[0] = q27_to_float(param_biasLow)/2.0;
	params.dcBias[1] = q27_to_float(param_biasMid)/2.0;
	params.dcBias[2] = q27_to_float(param_biasHigh)/2.0;
	params.level[0] = q27_to_float(param_levelLow);
	params.level[1] = q27_to_float(param_levelMid);
	params.level[2] = q27_to_float(param_levelHigh);
	params.tone = (param_tone);
	params.seperationFrequency[0] = (param_splitLow);
	params.seperationFrequency[1] = (param_splitHigh);
	distortion.parameters(params);

	kcnt = 0;
}


distortion.update(inlet_in, outlet_out);]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="mix/mix 2 g" uuid="221f038da51943034a75e442c90624fcebfe6112" name="mix_1" x="588" y="28">
      <params>
         <frac32.u.map name="gain1" value="18.0">
            <modulators/>
            <presets/>
         </frac32.u.map>
         <frac32.u.map name="gain2" value="0.0">
            <modulators/>
            <presets/>
         </frac32.u.map>
      </params>
      <attribs/>
   </obj>
   <obj type="audio/inconfig" uuid="9a80ef3c19f2a8f81da3a3b7c1c44d18126b97d9" name="inconfig_1" x="14" y="42">
      <params/>
      <attribs>
         <combo attributeName="gain" selection="15dB"/>
         <combo attributeName="boost" selection="0dB"/>
         <combo attributeName="mode" selection="Stereo"/>
      </attribs>
   </obj>
   <obj type="DeluxeVerbResponse" uuid="3f916852-c082-4df5-89ca-e8887d20cba6" name="DeluxeVerbResponse_1" x="336" y="56">
      <params>
         <bool32.tgl name="onoff" value="1">
            <presets/>
         </bool32.tgl>
         <frac32.u.map name="level" value="64.0">
            <modulators/>
            <presets/>
         </frac32.u.map>
         <frac32.s.map name="gainLow" value="-64.0">
            <modulators/>
            <presets/>
         </frac32.s.map>
         <frac32.s.map name="gainMid" value="-64.0">
            <modulators/>
            <presets/>
         </frac32.s.map>
         <frac32.s.map name="gainHigh" value="-64.0">
            <modulators/>
            <presets/>
         </frac32.s.map>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="2710898e-2b1c-4e0f-9622-45723d38b985" name="predelay_slap" x="728" y="126">
      <params>
         <int32 name="predelaymsec" value="64">
            <presets/>
         </int32>
      </params>
      <attribs/>
      <object id="patch/object" uuid="2710898e-2b1c-4e0f-9622-45723d38b985">
         <author>Jürgen Schwietering</author>
         <license>BSD</license>
         <helpPatch>fdbkcomb.axh</helpPatch>
         <inlets>
            <frac32buffer name="in" description="in"/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="out"/>
         </outlets>
         <displays/>
         <params>
            <int32 name="predelaymsec">
               <MinValue i="0"/>
               <MaxValue i="200"/>
            </int32>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[const int32_t maxSize = 9600+48*2; // max 200msecs
int32_t *d;
int32_t head;
int32_t tail;]]></code.declaration>
         <code.init><![CDATA[d=(int32_t *) sdram_malloc(sizeof(int32_t)*maxSize);
memset(d,0, sizeof(int32_t)*maxSize);

head = 0;]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[]]></code.krate>
         <code.srate><![CDATA[outlet_out = d[tail++];
d[head++] = inlet_in;

if (head >= maxSize)
{
	head = 0;
	tail = maxSize - (param_predelaymsec*48+1);
}

if (tail >= maxSize)
{
	tail = 0;
}]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="input_diffusor" uuid="c0927fc8-cefa-4925-9eab-de5b0ac11df5" name="input_diffusor_1" x="910" y="126">
      <params/>
      <attribs>
         <spinner attributeName="chainSize1" value="227"/>
         <spinner attributeName="chainSize2" value="173"/>
         <spinner attributeName="chainSize3" value="607"/>
         <spinner attributeName="chainSize4" value="443"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="4cbdc865-dce8-48e1-9c86-f69e3b6d101c" name="long_time_decay_feedback" x="1064" y="126">
      <params>
         <frac32.u.map name="gain" value="38.0">
            <modulators/>
            <presets/>
         </frac32.u.map>
      </params>
      <attribs/>
      <object id="patch/object" uuid="4cbdc865-dce8-48e1-9c86-f69e3b6d101c">
         <sDescription>Feedback mixer (Mono in x1, Stereo feedback)</sDescription>
         <author>Juergen Schwietering</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="mono" description="mono, no gain"/>
            <frac32buffer name="left" description="input left"/>
            <frac32buffer name="right" description="input right"/>
            <frac32.positive name="feedback" description=""/>
         </inlets>
         <outlets>
            <frac32buffer name="left" description="mix out"/>
            <frac32buffer name="right"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.ratio name="gain">
               <DefaultValue v="0.0"/>
            </frac32.u.map.ratio>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[]]></code.krate>
         <code.srate><![CDATA[int32_t accum = ___SMMUL(inlet_left<<2, param_gain<<3);
// add and saturate
outlet_left =  __SSAT(inlet_mono + accum, 28);
accum = ___SMMUL(inlet_right<<2, param_gain<<3);
outlet_right =  __SSAT(inlet_mono + accum, 28);]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="audio/in stereo" uuid="99848ad6d90a8e615e83b2e619cfc806f28e7281" name="in_1" x="42" y="140">
      <params/>
      <attribs/>
   </obj>
   <obj type="mix/mix 2 g" uuid="221f038da51943034a75e442c90624fcebfe6112" name="mix_2" x="588" y="182">
      <params>
         <frac32.u.map name="gain1" value="18.0">
            <modulators/>
            <presets/>
         </frac32.u.map>
         <frac32.u.map name="gain2" value="0.0">
            <modulators/>
            <presets/>
         </frac32.u.map>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="86c089fb-1efb-4da0-8d5a-5d1ddfba4413" name="stereo_highpass" x="546" y="336">
      <params>
         <frac32.s.map name="pitch" value="-24.799999713897705">
            <modulators/>
            <presets/>
         </frac32.s.map>
         <frac32.u.map name="reso" value="17.5">
            <modulators/>
            <presets/>
         </frac32.u.map>
      </params>
      <attribs/>
      <object id="patch/object" uuid="86c089fb-1efb-4da0-8d5a-5d1ddfba4413">
         <sDescription>2-pole resonant band-pass filter (biquad)</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>filter.axh</helpPatch>
         <inlets>
            <frac32buffer name="left" description="filter input"/>
            <frac32buffer name="right"/>
         </inlets>
         <outlets>
            <frac32buffer name="left" description="filter output"/>
            <frac32buffer name="right"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.pitch name="pitch">
               <DefaultValue v="0.0"/>
            </frac32.s.map.pitch>
            <frac32.u.map.filterq name="reso">
               <DefaultValue v="0.707"/>
            </frac32.u.map.filterq>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[biquad_coefficients bc;
biquad_state bs[2];]]></code.declaration>
         <code.init><![CDATA[biquad_clearstate(&bs[0]);
biquad_clearstate(&bs[1]);]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[static int32_t oldPitch=-1, oldReso=-1;

if ((oldPitch != param_pitch) || (oldReso != param_reso))
{ // only recalculate if changed 
	int32_t freq;
	MTOF(param_pitch,freq);
	biquad_hp_coefs(&bc,freq,INT_MAX - (__USAT(param_reso,27)<<4));
	oldPitch = param_pitch;
	oldReso = param_reso;
}

biquad_dsp(&bs[0],&bc,inlet_left,outlet_left);
biquad_dsp(&bs[1],&bc,inlet_right,outlet_right);]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="delay3taps" uuid="3e728861-0bb9-4d08-a428-b1eb2014b77c" name="delay3taps_1" x="840" y="378">
      <params>
         <int32 name="width" value="7182">
            <presets/>
         </int32>
         <int32 name="tap1" value="3210">
            <presets/>
         </int32>
         <int32 name="tap2" value="5850">
            <presets/>
         </int32>
         <int32 name="tap3" value="569">
            <presets/>
         </int32>
      </params>
      <attribs/>
   </obj>
   <obj type="diffusor_damper_tap2" uuid="bb56dda2-7971-4190-b8c3-c10a5981b3ed" name="diffusor_damper_tap2_2" x="1050" y="378">
      <params>
         <int32 name="tap1" value="299">
            <presets/>
         </int32>
         <int32 name="tap2" value="1965">
            <presets/>
         </int32>
      </params>
      <attribs>
         <spinner attributeName="chainSize" value="2903"/>
      </attribs>
   </obj>
   <obj type="delay2taps" uuid="7a0a72ad-0ad2-4526-a0a8-66c24392721f" name="delay2taps_1" x="1204" y="378">
      <params>
         <int32 name="width" value="5952">
            <presets/>
         </int32>
         <int32 name="tap1" value="1726">
            <presets/>
         </int32>
         <int32 name="tap2" value="4306">
            <presets/>
         </int32>
         <int32 name="tap3" value="669">
            <presets/>
         </int32>
      </params>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="c251ba58-a42c-414c-90f8-1ffe1e20b215" name="downmix" x="1344" y="392">
      <params/>
      <attribs/>
      <object id="patch/object" uuid="c251ba58-a42c-414c-90f8-1ffe1e20b215">
         <sDescription>7 input downmix</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <inlets>
            <frac32buffer name="p_in1" description="input 1"/>
            <frac32buffer name="p_in2" description="input 2"/>
            <frac32buffer name="n_in3" description="input 3"/>
            <frac32buffer name="p_in4" description="input 4"/>
            <frac32buffer name="n_in5" description="input 5"/>
            <frac32buffer name="n_in6" description="input 6"/>
            <frac32buffer name="n_in7" description="input 7"/>
            <frac32buffer name="p_in8" description=""/>
         </inlets>
         <outlets>
            <frac32buffer name="out" description="mix out"/>
         </outlets>
         <displays/>
         <params/>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[]]></code.krate>
         <code.srate><![CDATA[int32_t a = inlet_p__in1;

a += inlet_p__in2;
a -= inlet_n__in3;
a += inlet_p__in4;
a -= inlet_n__in5;
a -= inlet_n__in6;
a -= inlet_n__in7;
a += inlet_p__in8;
outlet_out = a;]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="disp/dial b" uuid="9ffed04e6a3052d9001eda83bae7024cb6d17037" name="dial_1" x="364" y="406">
      <params/>
      <attribs/>
   </obj>
   <obj type="modFdbkDelay" uuid="37e2fa21-a574-4976-98bb-2f9347702d30" name="modFdbkDelay_1" x="672" y="434">
      <params/>
      <attribs>
         <spinner attributeName="width" value="1217"/>
      </attribs>
   </obj>
   <patchobj type="patch/object" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb" name="feedback_modfdbk" x="504" y="518">
      <params>
         <frac32.s.map name="value" value="39.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="47.99999952316284"/>
               </preset>
            </presets>
         </frac32.s.map>
      </params>
      <attribs/>
      <object id="patch/object" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb">
         <sDescription>bipolar constant value dial</sDescription>
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.bipolar name="out" description="output"/>
         </outlets>
         <displays/>
         <params>
            <frac32.s.map.ratio name="value">
               <DefaultValue v="0.0"/>
            </frac32.s.map.ratio>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb" name="tank_diffusor" x="938" y="532">
      <params>
         <frac32.u.map name="value" value="43.5">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="47.99999952316284"/>
               </preset>
            </presets>
         </frac32.u.map>
      </params>
      <attribs/>
      <object id="patch/object" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb">
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.ratio name="value">
               <DefaultValue v="0.0"/>
            </frac32.u.map.ratio>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb" name="tank_diffusor_damp" x="1064" y="532">
      <params>
         <frac32.u.map name="value" value="10.0">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="47.99999952316284"/>
               </preset>
            </presets>
         </frac32.u.map>
      </params>
      <attribs/>
      <object id="tank_diffusor_damp" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb">
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.ratio name="value">
               <DefaultValue v="0.0"/>
            </frac32.u.map.ratio>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <patchobj type="patch/object" uuid="220b349a-2086-4deb-ad06-ab52708ebe3e" name="Akai Midimix" x="182" y="560">
      <params>
         <int32.hradio name="program" value="7">
            <presets/>
         </int32.hradio>
         <bool32.mom name="save" value="0">
            <presets/>
         </bool32.mom>
      </params>
      <attribs/>
      <object id="Akai Midimix" uuid="220b349a-2086-4deb-ad06-ab52708ebe3e">
         <inlets/>
         <outlets>
            <frac32.positive name="modulationTime" description="ModulationTime"/>
            <frac32.positive name="modulationFeedback" description=""/>
            <int32 name="modulationDepth" description=""/>
            <frac32.positive name="modulationDamp" description=""/>
         </outlets>
         <displays/>
         <params>
            <int32.hradio name="program" description="">
               <MaxValue i="8"/>
            </int32.hradio>
            <bool32.mom name="save" description=""/>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="modFdbkDelay" uuid="37e2fa21-a574-4976-98bb-2f9347702d30" name="modFdbkDelay_2" x="672" y="574">
      <params/>
      <attribs>
         <spinner attributeName="width" value="1217"/>
      </attribs>
   </obj>
   <obj type="downmix8" uuid="79d704c9-9b46-430e-bf14-53d0ebba89d2" name="downmix8_1" x="1344" y="588">
      <params/>
      <attribs/>
   </obj>
   <patchobj type="patch/object" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb" name="damper modfdbk" x="504" y="644">
      <params>
         <frac32.u.map name="value" value="21.5">
            <modulators/>
            <presets>
               <preset index="1">
                  <f v="47.99999952316284"/>
               </preset>
            </presets>
         </frac32.u.map>
      </params>
      <attribs/>
      <object id="damper modfdbk" uuid="51a8b8e4-4661-4c24-8bcc-4847eb27a9fb">
         <author>Johannes Taelman</author>
         <license>BSD</license>
         <helpPatch>ctrl.axh</helpPatch>
         <inlets/>
         <outlets>
            <frac32.positive name="out"/>
         </outlets>
         <displays/>
         <params>
            <frac32.u.map.ratio name="value">
               <DefaultValue v="0.0"/>
            </frac32.u.map.ratio>
         </params>
         <attribs/>
         <file-depends/>
         <includes/>
         <depends/>
         <modules/>
         <code.declaration><![CDATA[]]></code.declaration>
         <code.init><![CDATA[]]></code.init>
         <code.dispose><![CDATA[]]></code.dispose>
         <code.krate><![CDATA[outlet_out= param_value;]]></code.krate>
         <code.srate><![CDATA[]]></code.srate>
         <code.midihandler><![CDATA[]]></code.midihandler>
      </object>
   </patchobj>
   <obj type="delay3taps" uuid="3e728861-0bb9-4d08-a428-b1eb2014b77c" name="delay3taps_2" x="840" y="658">
      <params>
         <int32 name="width" value="6747">
            <presets/>
         </int32>
         <int32 name="tap1" value="426">
            <presets/>
         </int32>
         <int32 name="tap2" value="4758">
            <presets/>
         </int32>
         <int32 name="tap3" value="3378">
            <presets/>
         </int32>
      </params>
      <attribs/>
   </obj>
   <obj type="diffusor_damper_tap2" uuid="bb56dda2-7971-4190-b8c3-c10a5981b3ed" name="diffusor_damper_tap2_3" x="1050" y="658">
      <params>
         <int32 name="tap1" value="3061">
            <presets/>
         </int32>
         <int32 name="tap2" value="536">
            <presets/>
         </int32>
      </params>
      <attribs>
         <spinner attributeName="chainSize" value="4253"/>
      </attribs>
   </obj>
   <obj type="delay2taps" uuid="7a0a72ad-0ad2-4526-a0a8-66c24392721f" name="delay2taps_2" x="1204" y="658">
      <params>
         <int32 name="width" value="5061">
            <presets/>
         </int32>
         <int32 name="tap1" value="3194">
            <presets/>
         </int32>
         <int32 name="tap2" value="194">
            <presets/>
         </int32>
         <int32 name="tap3" value="1611">
            <presets/>
         </int32>
      </params>
      <attribs/>
   </obj>
   <nets>
      <net>
         <source obj="in_1" outlet="left"/>
         <dest obj="Distortion_1" inlet="in"/>
      </net>
      <net>
         <source obj="feedback_modfdbk" outlet="out"/>
         <dest obj="modFdbkDelay_2" inlet="fdbk"/>
      </net>
      <net>
         <source obj="long_time_decay_feedback" outlet="left"/>
         <dest obj="stereo_highpass" inlet="left"/>
      </net>
      <net>
         <source obj="long_time_decay_feedback" outlet="right"/>
         <dest obj="stereo_highpass" inlet="right"/>
      </net>
      <net>
         <source obj="stereo_highpass" outlet="left"/>
         <dest obj="modFdbkDelay_1" inlet="in"/>
      </net>
      <net>
         <source obj="stereo_highpass" outlet="right"/>
         <dest obj="modFdbkDelay_2" inlet="in"/>
      </net>
      <net>
         <source obj="predelay_slap" outlet="out"/>
         <dest obj="input_diffusor_1" inlet="in"/>
      </net>
      <net>
         <source obj="input_diffusor_1" outlet="out"/>
         <dest obj="long_time_decay_feedback" inlet="mono"/>
      </net>
      <net>
         <source obj="diffusor_damper_tap2_2" outlet="out"/>
         <dest obj="delay2taps_1" inlet="in"/>
      </net>
      <net>
         <source obj="diffusor_damper_tap2_2" outlet="tap1"/>
         <dest obj="downmix" inlet="n_in6"/>
      </net>
      <net>
         <source obj="diffusor_damper_tap2_2" outlet="tap2"/>
         <dest obj="downmix8_1" inlet="n_in3"/>
      </net>
      <net>
         <source obj="diffusor_damper_tap2_3" outlet="out"/>
         <dest obj="delay2taps_2" inlet="in"/>
      </net>
      <net>
         <source obj="diffusor_damper_tap2_3" outlet="tap1"/>
         <dest obj="downmix" inlet="n_in3"/>
      </net>
      <net>
         <source obj="diffusor_damper_tap2_3" outlet="tap2"/>
         <dest obj="downmix8_1" inlet="n_in6"/>
      </net>
      <net>
         <source obj="tank_diffusor" outlet="out"/>
         <dest obj="diffusor_damper_tap2_2" inlet="fdbk"/>
         <dest obj="diffusor_damper_tap2_3" inlet="fdbk"/>
      </net>
      <net>
         <source obj="tank_diffusor_damp" outlet="out"/>
         <dest obj="diffusor_damper_tap2_2" inlet="damping"/>
         <dest obj="diffusor_damper_tap2_3" inlet="damping"/>
      </net>
      <net>
         <source obj="damper modfdbk" outlet="out"/>
         <dest obj="modFdbkDelay_2" inlet="damper"/>
      </net>
      <net>
         <source obj="delay3taps_1" outlet="tap1"/>
         <dest obj="downmix" inlet="p_in1"/>
      </net>
      <net>
         <source obj="delay3taps_1" outlet="tap2"/>
         <dest obj="downmix" inlet="p_in2"/>
      </net>
      <net>
         <source obj="delay3taps_1" outlet="tap3"/>
         <dest obj="downmix8_1" inlet="n_in5"/>
      </net>
      <net>
         <source obj="delay3taps_2" outlet="tap1"/>
         <dest obj="downmix8_1" inlet="p_in1"/>
      </net>
      <net>
         <source obj="delay3taps_2" outlet="tap2"/>
         <dest obj="downmix8_1" inlet="p_in2"/>
      </net>
      <net>
         <source obj="delay3taps_2" outlet="tap3"/>
         <dest obj="downmix" inlet="n_in5"/>
      </net>
      <net>
         <source obj="delay2taps_1" outlet="out"/>
         <dest obj="long_time_decay_feedback" inlet="right"/>
      </net>
      <net>
         <source obj="delay2taps_1" outlet="tap1"/>
         <dest obj="downmix" inlet="n_in7"/>
      </net>
      <net>
         <source obj="delay2taps_1" outlet="tap2"/>
         <dest obj="downmix8_1" inlet="p_in4"/>
      </net>
      <net>
         <source obj="delay2taps_2" outlet="out"/>
         <dest obj="long_time_decay_feedback" inlet="left"/>
      </net>
      <net>
         <source obj="delay2taps_2" outlet="tap1"/>
         <dest obj="downmix" inlet="p_in4"/>
      </net>
      <net>
         <source obj="delay2taps_2" outlet="tap2"/>
         <dest obj="downmix8_1" inlet="n_in7"/>
      </net>
      <net>
         <source obj="delay3taps_2" outlet="out"/>
         <dest obj="diffusor_damper_tap2_3" inlet="in"/>
      </net>
      <net>
         <source obj="delay3taps_1" outlet="out"/>
         <dest obj="diffusor_damper_tap2_2" inlet="in"/>
      </net>
      <net>
         <source obj="modFdbkDelay_1" outlet="out"/>
         <dest obj="delay3taps_1" inlet="in"/>
      </net>
      <net>
         <source obj="modFdbkDelay_2" outlet="out"/>
         <dest obj="delay3taps_2" inlet="in"/>
      </net>
      <net>
         <source obj="delay2taps_2" outlet="tap3"/>
         <dest obj="downmix8_1" inlet="p_in8"/>
      </net>
      <net>
         <source obj="delay2taps_1" outlet="tap3"/>
         <dest obj="downmix" inlet="p_in8"/>
      </net>
      <net>
         <source obj="Akai Midimix" outlet="modulationTime"/>
         <dest obj="dial_1" inlet="in"/>
         <dest obj="modFdbkDelay_1" inlet="modulationTime"/>
      </net>
      <net>
         <source obj="Akai Midimix" outlet="modulationDamp"/>
         <dest obj="modFdbkDelay_1" inlet="damper"/>
      </net>
      <net>
         <source obj="Akai Midimix" outlet="modulationFeedback"/>
         <dest obj="modFdbkDelay_1" inlet="fdbk"/>
      </net>
      <net>
         <source obj="Akai Midimix" outlet="modulationDepth"/>
         <dest obj="modFdbkDelay_1" inlet="moddepth"/>
      </net>
      <net>
         <source obj="DeluxeVerbResponse_1" outlet="out"/>
         <dest obj="predelay_slap" inlet="in"/>
         <dest obj="mix_1" inlet="bus_in"/>
         <dest obj="mix_2" inlet="bus_in"/>
      </net>
      <net>
         <source obj="Distortion_1" outlet="out"/>
         <dest obj="DeluxeVerbResponse_1" inlet="in"/>
      </net>
      <net>
         <source obj="downmix" outlet="out"/>
         <dest obj="mix_1" inlet="in1"/>
      </net>
      <net>
         <source obj="mix_1" outlet="out"/>
         <dest obj="out_1" inlet="left"/>
      </net>
      <net>
         <source obj="mix_2" outlet="out"/>
         <dest obj="out_1" inlet="right"/>
      </net>
      <net>
         <source obj="downmix8_1" outlet="out"/>
         <dest obj="mix_2" inlet="in1"/>
      </net>
   </nets>
   <settings>
      <subpatchmode>no</subpatchmode>
      <NPresetEntries>30</NPresetEntries>
   </settings>
   <notes><![CDATA[]]></notes>
   <windowPos>
      <x>809</x>
      <y>111</y>
      <width>1711</width>
      <height>988</height>
   </windowPos>
</patch>