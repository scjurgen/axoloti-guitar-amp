<objdefs appVersion="2.0.0">
   <obj.normal id="diffusor_lp_tap2" uuid="3c4c6b5c-ebae-4092-af22-1f97a41ff5a3">
      <sDescription>samplesize variant combfilter with 2 taps and low pass filter on feedback</sDescription>
      <author>JÃ¼rgen Schwietering</author>
      <license>MIT</license>
      <helpPatch></helpPatch>
      <inlets>
         <frac32buffer name="in" description="in"/>
         <frac32.positive name="fdbk"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="out"/>
         <frac32buffer name="tap1"/>
         <frac32buffer name="tap2"/>
      </outlets>
      <displays/>
      <params>
         <int32 name="tap1">
            <MinValue i="0"/>
            <MaxValue i="4000"/>
         </int32>
         <int32 name="tap2">
            <MinValue i="0"/>
            <MaxValue i="4000"/>
         </int32>
         <bool32.tgl name="lpOn" description=""/>
         <frac32.s.map.pitch name="LPpitch" description="">
            <DefaultValue v="0.0"/>
         </frac32.s.map.pitch>
         <frac32.u.map.filterq name="LPreso" description="">
            <DefaultValue v="0.0"/>
         </frac32.u.map.filterq>
      </params>
      <attribs>
         <spinner name="chainSize" MinValue="1000" MaxValue="4000" DefaultValue="2880"/>
      </attribs>
      <file-depends/>
      <includes/>
      <depends/>
      <modules/>
      <code.declaration><![CDATA[class FeedbackRing
{
public:
	FeedbackRing()
	: m_size(0)
	, m_head(0)
	, m_gain(0)
	{
	}

	void init(int size)
	{
		m_buffer = (int32_t *) sdram_malloc(size*sizeof(int32_t));
		m_size = size;
		memset(m_buffer,0, sizeof(int32_t)*m_size);
		m_head = 0;
		m_adjustGain = false;
		biquad_clearstate(&bs);
	}

	void gain(int32_t gain_q27, bool adjustGain=false)
	{
		if (float_to_q27(0.9) <= gain_q27)
			gain_q27 = float_to_q27(0.9);
		m_gain = gain_q27<<3;
		m_outgain = 8<<27;
		if (adjustGain)
		{
			adjustOutputGain();
		}
	}

	void setLowPass(int32_t pitch, int32_t reso)
	{
	    int32_t freq;
         MTOF(pitch,freq);
         biquad_lp_coefs(&bc,freq,INT_MAX - (__USAT(reso,27)<<4));
	}

	void adjustOutputGain()
	{
		const float cx=1.0, cy=0.35, cd=0.73;
		float currentAdjust = 1.0/((1.0f / (cx-fabs(q27_to_float(m_gain>>3)))) * cd + cy);
		m_outgain = float_to_q27(currentAdjust)<<3;
		m_adjustGain = true;
	}

	
	int32_t tap(int32_t rel_position)
	{
		int h=m_head+rel_position;
		if (h >= m_size)
			h-=m_size;
		return m_buffer[h];
	}

	int32_t update(bool lp, const int32buffer in, int32buffer &out, int32_t tap1Pos, int32buffer &tap1, int32_t tap2Pos,int32buffer &tap2)
	{
		int32buffer tmp,ret, filtered;
		int head = m_head;
		for (int i=0; i < BUFSIZE; ++i)
		{
			ret[i] = ___SMMLA(in[i]<<2, m_gain, m_buffer[head]);
			int32_t satValue = ___SMMLA(m_buffer[head]<<2, -m_gain, in[i]); // N.B. negativ feedback
			tmp[i] = satValue;
			head++;
			if (head >= m_size)
				head = 0;
		}
		if (lp)
			biquad_dsp(&bs,&bc,tmp,filtered);
		else
			memcpy(filtered, tmp, sizeof(tmp));

		for (int i=0; i < BUFSIZE; ++i)
		{
			m_buffer[m_head++] = filtered[i];
			if (m_head >= m_size)
				m_head = 0;
			if (m_adjustGain)
			{
				ret[i] = ___SMMUL(ret[i], m_outgain)<<2;
			}
			out[i] = ret[i];
			tap1[i] = tap(tap1Pos);
			tap2[i] = tap(tap2Pos);
		}
	}

private:
	int32_t m_size;
	int32_t m_head;
	int32_t m_gain;
	int32_t m_outgain;
	bool m_adjustGain;
	int32_t *m_buffer;
	biquad_state bs;
	biquad_coefficients bc;
};

FeedbackRing rng;]]></code.declaration>
      <code.init><![CDATA[rng.init(attr_chainSize);]]></code.init>
      <code.krate><![CDATA[static int32_t oldFdbk=123;

if (oldFdbk!=inlet_fdbk)
{
	oldFdbk = inlet_fdbk;
	rng.gain(oldFdbk, true);
}

static int32_t oldReso=123;
static int32_t oldPitch=123;

if ((oldReso!=param_LPreso) || (oldPitch!=param_LPpitch))
{
	oldReso = param_LPreso;
	oldPitch = param_LPpitch;
	rng.setLowPass(oldPitch, oldReso);
}

rng.update(param_lpOn, inlet_in, outlet_out, param_tap1, outlet_tap1, param_tap2, outlet_tap2);]]></code.krate>
   </obj.normal>
</objdefs>